version: '3.8'

networks:
  traefik-public:
    external: true
  internal:
    external: false

services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    restart: always
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-secure.entrypoints=websecure"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.${DOMAIN:-example.com}`)"
      - "traefik.http.routers.traefik-secure.service=api@internal"
      - "traefik.http.routers.traefik-secure.middlewares=admin-auth"
      - "traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_BASIC_AUTH:-admin:$$apr1$$xyF4GQFc$$R2hfZn4d.lY6PfT1Tatrq/}"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer-secure.entrypoints=websecure"
      - "traefik.http.routers.portainer-secure.rule=Host(`portainer.${DOMAIN:-example.com}`)"
      - "traefik.http.routers.portainer-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.portainer-service.loadbalancer.server.port=9000"

  postgres:
    image: postgres:14
    container_name: meta-ads-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-metaads}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword}
      POSTGRES_DB: ${POSTGRES_DB:-metaadsreports}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - internal
    labels:
      - "traefik.enable=false"

  redis:
    image: redis:alpine
    container_name: meta-ads-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-securepassword}
    volumes:
      - redis_data:/data
    networks:
      - internal
    labels:
      - "traefik.enable=false"

  api:
    build:
      context: ./backend
    container_name: meta-ads-api
    restart: always
    depends_on:
      - postgres
      - redis
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-metaads}:${POSTGRES_PASSWORD:-securepassword}@postgres:5432/${POSTGRES_DB:-metaadsreports}
      REDIS_URL: redis://:${REDIS_PASSWORD:-securepassword}@redis:6379
      META_APP_ID: ${META_APP_ID}
      META_APP_SECRET: ${META_APP_SECRET}
      JWT_SECRET: ${JWT_SECRET:-changeThisToSecureRandomString}
      FRONTEND_URL: https://${DOMAIN:-app.example.com}
    networks:
      - traefik-public
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-secure.entrypoints=websecure"
      - "traefik.http.routers.api-secure.rule=Host(`api.${DOMAIN:-example.com}`)"
      - "traefik.http.routers.api-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.api-service.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowheaders=Origin,X-Requested-With,Content-Type,Accept,Authorization"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolalloworiginlist=https://${DOMAIN:-app.example.com}"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.api-cors.headers.addvaryheader=true"
      - "traefik.http.routers.api-secure.middlewares=api-cors"

  frontend:
    build:
      context: ./frontend
    container_name: meta-ads-frontend
    restart: always
    depends_on:
      - api
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-secure.entrypoints=websecure"
      - "traefik.http.routers.frontend-secure.rule=Host(`${DOMAIN:-app.example.com}`)"
      - "traefik.http.routers.frontend-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend-service.loadbalancer.server.port=80"
      - "traefik.http.middlewares.security-headers.headers.forcestsheader=true"
      - "traefik.http.middlewares.security-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsseconds=31536000"
      - "traefik.http.routers.frontend-secure.middlewares=security-headers"

volumes:
  postgres_data:
  redis_data:
  portainer_data:
